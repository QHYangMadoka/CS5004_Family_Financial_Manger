/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package final_project;
import java.io.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class App {
    // Declare the instances as static to be accessible throughout the class
    private static Family family;
    private static AssetAndDebtManager assetManager;
    private static GoalManager goalManager;
    private static BalanceSheet balanceSheet;
    private static FinancialAdvisor financialAdvisor;
    private static PersonFactory personFactory;


    public static void main(String[] args) {
        initializeManagers();
        SwingUtilities.invokeLater(App::createAndShowGUI);
    }



    private static void createAndShowGUI() {
        JFrame frame = new JFrame("Financial Manager");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 600);

        JTabbedPane tabbedPane = new JTabbedPane();
        JPanel balanceSheetPanel = createBalanceSheetPanel(frame);
        JPanel saveInfoPanel = createSaveInfoPanel(frame);

        tabbedPane.addTab("Balance Sheet & Advisor", balanceSheetPanel);
        tabbedPane.addTab("Save Your Info", saveInfoPanel);

        frame.add(tabbedPane);
        frame.setVisible(true);
    }

    private static void initializeManagers() {
        personFactory = new PersonFactory();
        family = Family.getInstance(personFactory);
        assetManager = AssetAndDebtManager.getInstance();
        goalManager = GoalManager.getInstance();
        balanceSheet = new BalanceSheet(family, assetManager, 0.05); // Example discount rate
        financialAdvisor = new FinancialAdvisor(goalManager, balanceSheet);

        try {
            family.loadPeopleFromCSV();
            goalManager.loadGoalsFromCSV();
            assetManager.loadDebtsFromCSV();
            assetManager.loadStocksFromCSV();
            assetManager.loadRealEstateFromCSV();
            assetManager.loadBondsFromCSV();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Failed to load family members from CSV: " + e.getMessage());
        }
    }
    private static JPanel createBalanceSheetPanel(JFrame frame) {
        JPanel panel = new JPanel(new BorderLayout()); // Main panel using BorderLayout
    
        JPanel leftPanel = createBalanceSheetPanelLeft(frame); // Pass the frame to the method
        JPanel rightPanel = createBalanceSheetPanelRight(); // Assume this method does not need the frame
    
        panel.add(leftPanel, BorderLayout.WEST);
        panel.add(rightPanel, BorderLayout.EAST);
    
        return panel;
    }



    private static JPanel createBalanceSheetPanelLeft(JFrame frame) {
        JPanel leftPanel = new JPanel(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
        c.insets = new Insets(2, 2, 2, 2); // Consistent margins
        c.gridx = 0;  // Column 0 for labels
        c.gridy = 0;  // Start at the first row
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 1;
    
        // Generate Balance Sheet button
        JButton genBalanceSheetButton = new JButton("Generate Balance Sheet");
        setupGenerateBalanceSheetButton(genBalanceSheetButton, frame); // Configure the button and event listener
        c.gridy++;
        c.gridwidth = 2;
        leftPanel.add(genBalanceSheetButton, c);
    
        // Applied Discount Rate field
        JLabel rateLabel = new JLabel("Applied Discount Rate:");
        JTextField rateField = new JTextField(10);
        rateField.setText(Double.toString(balanceSheet.getAppliedInterestRate())); // Set initial value
        c.gridy++;
        c.gridwidth = 1;
        leftPanel.add(rateLabel, c);
        c.gridx = 1;
        leftPanel.add(rateField, c);
        c.gridx = 0;
    
        // Set Rate button to update the interest rate
        JButton setRateButton = new JButton("Set Rate");
        setRateButton.addActionListener(e -> {
            try {
                double newRate = Double.parseDouble(rateField.getText());
                balanceSheet.setAppliedInterestRate(newRate);
                JOptionPane.showMessageDialog(null, "Interest rate updated to " + newRate);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Invalid interest rate: " + ex.getMessage());
            }
        });
        c.gridy++;
        c.gridwidth = 2;
        leftPanel.add(setRateButton, c);
    
         // Generate Advice button
        JButton genAdviceButton = new JButton("Generate Advice");
        genAdviceButton.addActionListener(e -> {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            PrintStream ps = new PrintStream(baos);
            PrintStream old = System.out; // Keep the old System.out
            System.setOut(ps); // Redirect output to the byte array output stream

            financialAdvisor.evaluateFinancialSituation(); // Evaluate current financial situation to set the strategy
            financialAdvisor.advise(); // Execute the strategy to generate advice

            System.out.flush();
            System.setOut(old); // Reset the System.out to its original

            String adviceOutput = baos.toString(); // Convert output stream to string

            // Display the advice in a JOptionPane or a custom dialog
            JOptionPane.showMessageDialog(frame, adviceOutput, "Financial Advice", JOptionPane.INFORMATION_MESSAGE);
        });
        c.gridy++;
        leftPanel.add(genAdviceButton, c);

        return leftPanel;
    }
    
    




    private static void setupGenerateBalanceSheetButton(JButton button, JFrame parentFrame) {
        button.addActionListener(e -> {
            // Create a dialog to display the data
            JDialog dialog = new JDialog(parentFrame, "Balance Sheet Details", true);
            dialog.setSize(600, 400);
            dialog.setLayout(new BorderLayout());
    
            // Text area for displaying information
            JTextArea textArea = new JTextArea(20, 50);
            textArea.setEditable(false); // Set the text area to non-editable
            JScrollPane scrollPane = new JScrollPane(textArea); // Add a scroll pane to the text area
            dialog.add(scrollPane, BorderLayout.CENTER);
    
            // Capture the output from System.out
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            PrintStream printStream = new PrintStream(baos);
            PrintStream old = System.out; // Save the old System.out
            System.setOut(printStream); // Redirect System.out to PrintStream
    
            // Call BalanceSheet methods to print data
            balanceSheet.printIncomeStatement();
            balanceSheet.printExpenditureStatement();
            balanceSheet.printAssetsDetails();
            balanceSheet.printLiabilitiesDetails();
            balanceSheet.printNetPresentValue();
    
            System.out.flush();
            System.setOut(old); // Restore the original System.out
    
            // Set the text area to show all the printed content
            textArea.setText(baos.toString());
    
            // Display the dialog
            dialog.setVisible(true);
        });
    }
    

















    

    private static JPanel createBalanceSheetPanelRight() {
        JPanel rightPanel = new JPanel(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
        c.insets = new Insets(2, 2, 2, 2);
        c.gridx = 0;
        c.gridy = 0;
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 1;
    
        // Updated fields and labels for asset properties, including Interest Rate
        String[] rightLabels = {"Description", "Amount", "Interest Rate", "Volatility", "Maturity", "Coupon", "Dividend", "Dividend Growth Rate", "NOI"};
        JTextField[] textFields = new JTextField[rightLabels.length];
        for (int i = 0; i < rightLabels.length; i++) {
            JLabel jLabel = new JLabel(rightLabels[i] + ":");
            JTextField jTextField = new JTextField(10);
            textFields[i] = jTextField; // Store text field to array for later use
    
            c.gridy++;
            rightPanel.add(jLabel, c);
            c.gridx = 1;
            rightPanel.add(jTextField, c);
            c.gridx = 0;
        }
    
        // Asset Class combo box
        JComboBox<String> assetClassComboBox = new JComboBox<>(new String[]{"Select Asset Class", "Bond", "Stock", "Real Estate"});
        JLabel assetClassLabel = new JLabel("Asset Class:");
        c.gridy++;
        rightPanel.add(assetClassLabel, c);
        c.gridx = 1;
        rightPanel.add(assetClassComboBox, c);
        c.gridx = 0;
    
        // Add Asset button
        JButton addAssetButton = new JButton("Add Asset");
        addAssetButton.addActionListener(e -> addAsset(textFields, assetClassComboBox));
        c.gridy++;
        c.gridwidth = 2;
        rightPanel.add(addAssetButton, c);
        c.gridwidth = 1;
    
        // Description TextField for deleting an asset
        JTextField deleteAssetField = new JTextField(10);
        JLabel deleteAssetLabel = new JLabel("Delete Asset:");
        c.gridy++;
        rightPanel.add(deleteAssetLabel, c);
        c.gridx = 1;
        rightPanel.add(deleteAssetField, c);
        c.gridx = 0;
    
        // Delete Asset button
        JButton deleteAssetButton = new JButton("Delete Asset");
        deleteAssetButton.addActionListener(e -> deleteAsset(deleteAssetField.getText(), assetClassComboBox));
        c.gridy++;
        c.gridwidth = 2;
        rightPanel.add(deleteAssetButton, c);
    
        return rightPanel;
    }
    
    private static void addAsset(JTextField[] textFields, JComboBox<String> assetClassComboBox) {
        String assetClass = (String) assetClassComboBox.getSelectedItem();
        AssetAndDebtManager assetManager = AssetAndDebtManager.getInstance();
    
        try {
            // Determine the required fields based on the asset class
            int[] requiredFields;
            switch (assetClass) {
                case "Bond":
                    requiredFields = new int[]{0, 1, 2, 3, 4, 5}; // Description, Amount, Interest Rate, Volatility, Maturity, Coupon
                    break;
                case "Stock":
                    requiredFields = new int[]{0, 1, 2, 3, 6, 7}; // Description, Amount, Interest Rate, Volatility, Dividend, Dividend Growth Rate
                    break;
                case "Real Estate":
                    requiredFields = new int[]{0, 1, 2, 3, 8}; // Description, Amount, Interest Rate, Volatility, NOI
                    break;
                default:
                    throw new IllegalArgumentException("Unsupported asset class");
            }
    
            // Validate required fields are not empty
            for (int index : requiredFields) {
                if (textFields[index].getText().trim().isEmpty()) {
                    throw new IllegalArgumentException("Please fill in all required fields for " + assetClass);
                }
            }
    
            // Create and add the asset
            switch (assetClass) {
                case "Bond":
                    Bond bond = new Bond(
                            Double.parseDouble(textFields[1].getText()),
                            Double.parseDouble(textFields[2].getText()),
                            Double.parseDouble(textFields[3].getText()),
                            Integer.parseInt(textFields[4].getText()),
                            Double.parseDouble(textFields[5].getText()),
                            textFields[0].getText()
                    );
                    assetManager.addBond(bond);
                    break;
                case "Stock":
                    Stock stock = new Stock(
                            Double.parseDouble(textFields[1].getText()),
                            Double.parseDouble(textFields[2].getText()),
                            Double.parseDouble(textFields[3].getText()),
                            Double.parseDouble(textFields[6].getText()),
                            Double.parseDouble(textFields[7].getText()),
                            textFields[0].getText()
                    );
                    assetManager.addStock(stock);
                    break;
                case "Real Estate":
                    RealEstate realEstate = new RealEstate(
                            Double.parseDouble(textFields[1].getText()),
                            Double.parseDouble(textFields[2].getText()),
                            Double.parseDouble(textFields[3].getText()),
                            Double.parseDouble(textFields[8].getText()),
                            textFields[0].getText()
                    );
                    assetManager.addRealEstate(realEstate);
                    break;
            }
            JOptionPane.showMessageDialog(null, assetClass + " added successfully!");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error processing data: " + ex.getMessage());
        }
    }
    
    
    

    
    private static void deleteAsset(String description, JComboBox<String> assetClassComboBox) {
        String assetClass = (String) assetClassComboBox.getSelectedItem();
        try {
            boolean deleted = false;
            switch (assetClass) {
                case "Bond":
                    deleted = assetManager.deleteBond(description);
                    break;
                case "Stock":
                    deleted = assetManager.deleteStock(description);
                    break;
                case "Real Estate":
                    deleted = assetManager.deleteRealEstate(description);
                    break;
            }
            if (deleted) {
                JOptionPane.showMessageDialog(null, assetClass + " deleted successfully!");
            } else {
                JOptionPane.showMessageDialog(null, assetClass + " not found!");
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Failed to delete " + assetClass + ": " + ex.getMessage());
        }
    }
    
    


    private static JPanel createSaveInfoPanel(JFrame frame) {
        JPanel panel = new JPanel(new BorderLayout());  // Main panel using BorderLayout
    
        // Add panels to main panel
        JPanel leftPanel = createLeftPanel();   // Assuming createLeftPanel is already defined
        JPanel middlePanel = createMiddlePanel();  // Assuming createMiddlePanel is already defined
        JPanel rightPanel = createRightPanel();  // Right panel for debts
    
        // Add panels to appropriate regions
        panel.add(leftPanel, BorderLayout.WEST);
        panel.add(middlePanel, BorderLayout.CENTER);
        panel.add(rightPanel, BorderLayout.EAST);
    
        return panel;
    }

    private static JPanel createLeftPanel() {
        JPanel leftPanel = new JPanel(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
        c.insets = new Insets(2, 2, 2, 2);
        c.anchor = GridBagConstraints.WEST;
        c.weightx = 1;
        c.fill = GridBagConstraints.HORIZONTAL;
        c.gridx = 0;
        c.gridy = 0;
    
        // Field labels and text fields
        String[] fields = {"Name", "Birth Year", "Monthly Income", "Monthly Expenditure", "Insurance", "LifeSpan"};
        JTextField[] textFields = new JTextField[fields.length];
        for (int i = 0; i < fields.length; i++) {
            JLabel label = new JLabel(fields[i] + ":");
            JTextField textField = new JTextField(10);
            textFields[i] = textField;
    
            c.gridy = i;
            leftPanel.add(label, c);
            c.gridx = 1;
            leftPanel.add(textField, c);
            c.gridx = 0;
        }
    
        // Save Person Button
        JButton saveButton = new JButton("Save Person");
        saveButton.addActionListener(e -> savePerson(textFields));
        c.gridy++;
        c.gridwidth = 2;
        leftPanel.add(saveButton, c);
    
        // TextField for person name to delete
        JTextField deletePersonField = new JTextField(10);
        c.gridy++;
        c.gridwidth = 1;
        leftPanel.add(new JLabel("Delete Person:"), c);
        c.gridx = 1;
        leftPanel.add(deletePersonField, c);
    
        // Delete Person Button
        JButton deleteButton = new JButton("Delete Person");
        deleteButton.addActionListener(e -> deletePerson(deletePersonField.getText()));
        c.gridx = 0;
        c.gridy++;
        c.gridwidth = 2;
        leftPanel.add(deleteButton, c);
    
        return leftPanel;
    }
    
    
    
    private static void savePerson(JTextField[] textFields) {
        try {
            String name = textFields[0].getText();
            int birthYear = Integer.parseInt(textFields[1].getText());
            double monthlyIncome = Double.parseDouble(textFields[2].getText());
            double monthlyExpenditure = Double.parseDouble(textFields[3].getText());
            double insurance = Double.parseDouble(textFields[4].getText());
            int lifeSpan = Integer.parseInt(textFields[5].getText());
    
            family.addFamilyMember(name, birthYear, monthlyIncome, monthlyExpenditure, insurance, lifeSpan);
            JOptionPane.showMessageDialog(null, "Person added successfully!");
    
            // Clear text fields after adding
            for (JTextField field : textFields) {
                field.setText("");
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Error in input data: " + ex.getMessage());
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Failed to save person data: " + ex.getMessage());
        }
    }
    
    private static void deletePerson(String name) {
        if (name != null && !name.isEmpty()) {
            try {
                if (family.deleteFamilyMember(name)) {
                    JOptionPane.showMessageDialog(null, "Person deleted successfully!");
                } else {
                    JOptionPane.showMessageDialog(null, "Person not found: " + name);
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error deleting person: " + ex.getMessage());
            }
        }
    }
    

    
    private static JPanel createMiddlePanel() {
        JPanel middlePanel = new JPanel(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
        c.insets = new Insets(2, 2, 2, 2);  // Margins around components
        c.anchor = GridBagConstraints.WEST;
        c.gridx = 0;
        c.gridy = 0;
        c.weightx = 1;
        c.fill = GridBagConstraints.HORIZONTAL;
    
        // Text fields for goal data
        String[] middleLabels = {"Amount", "Time", "Interest Rate", "Description"};
        JTextField[] middleTextFields = new JTextField[middleLabels.length];
        for (int i = 0; i < middleLabels.length; i++) {
            middleTextFields[i] = new JTextField(10);
            JLabel label = new JLabel(middleLabels[i] + ":");
            c.gridy = i;
            middlePanel.add(label, c);
            c.gridx = 1;
            middlePanel.add(middleTextFields[i], c);
            c.gridx = 0;
        }
    
        // One Time Payment checkbox
        JCheckBox oneTimePayment = new JCheckBox("One Time Payment");
        c.gridy = middleLabels.length;
        middlePanel.add(oneTimePayment, c);
    
        // Save Goal Button
        JButton saveGoalButton = new JButton("Save Goal");
        saveGoalButton.addActionListener(e -> {
            try {
                double amount = Double.parseDouble(middleTextFields[0].getText());
                int time = Integer.parseInt(middleTextFields[1].getText());
                double interestRate = Double.parseDouble(middleTextFields[2].getText());
                String description = middleTextFields[3].getText();
                boolean isOneTime = oneTimePayment.isSelected();
                goalManager.createGoal(amount, time, isOneTime, interestRate, description);
                JOptionPane.showMessageDialog(null, "Goal saved successfully!");
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Error in input data: " + ex.getMessage());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Failed to save goal data: " + ex.getMessage());
            }
        });
        c.gridy++;
        c.gridwidth = 2;
        middlePanel.add(saveGoalButton, c);
    
        // TextField for goal description to delete
        JTextField deleteGoalField = new JTextField(10);
        JLabel deleteLabel = new JLabel("Delete Goal:");
        c.gridy++;
        c.gridwidth = 1;
        middlePanel.add(deleteLabel, c);
        c.gridx = 1;
        middlePanel.add(deleteGoalField, c);
    
        // Delete Goal Button
        JButton deleteGoalButton = new JButton("Delete Goal");
        deleteGoalButton.addActionListener(e -> deleteGoal(deleteGoalField.getText()));
        c.gridx = 0;
        c.gridy++;
        c.gridwidth = 2;
        middlePanel.add(deleteGoalButton, c);
    
        return middlePanel;
    }
    
    private static void deleteGoal(String description) {
        if (description != null && !description.isEmpty()) {
            try {
                boolean deleted = goalManager.deleteGoal(description);
                if (deleted) {
                    JOptionPane.showMessageDialog(null, "Goal deleted successfully!");
                } else {
                    JOptionPane.showMessageDialog(null, "Goal not found: " + description);
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error deleting goal: " + ex.getMessage());
            }
        }
    }

    private static JPanel createRightPanel() {
        JPanel rightPanel = new JPanel(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
        c.insets = new Insets(2, 2, 2, 2);  // Consistent margins
        c.gridx = 0;  // Start at the first column
        c.gridy = 0;  // Start at the first row
        c.fill = GridBagConstraints.HORIZONTAL;
        c.weightx = 1;
        c.anchor = GridBagConstraints.WEST;
    
        // Labels and text fields
        String[] rightLabels = {"Amount", "Time", "Interest Rate", "Description"};
        JTextField[] textFields = new JTextField[rightLabels.length];
        for (int i = 0; i < rightLabels.length; i++) {
            textFields[i] = new JTextField(10);
            JLabel label = new JLabel(rightLabels[i] + ":");
            c.gridy++;  // Increment row for each new label
            rightPanel.add(label, c);
            c.gridx = 1;
            rightPanel.add(textFields[i], c);
            c.gridx = 0;
        }
    
        // One time payment checkbox
        JCheckBox oneTimeCheck = new JCheckBox("One Time Payment");
        c.gridy++;
        rightPanel.add(oneTimeCheck, c);
    
        // Category combo box
        JComboBox<String> categoryComboBox = new JComboBox<>(new String[]{"Select Category", "MORTGAGE", "VEHICLE_LOAN", "CONSUMPTION_LOAN", "OTHER"});
        c.gridy++;
        rightPanel.add(categoryComboBox, c);
    
        // Save Debt button
        JButton saveDebtButton = new JButton("Save Debt");
        saveDebtButton.addActionListener(e -> saveDebt(textFields, oneTimeCheck.isSelected(), (String) categoryComboBox.getSelectedItem()));
        c.gridy++;
        rightPanel.add(saveDebtButton, c);
    
        // Delete Debt TextField
        JTextField deleteDebtField = new JTextField(10);
        JLabel deleteLabel = new JLabel("Delete Debt:");
        c.gridy++;
        rightPanel.add(deleteLabel, c);
        c.gridx = 1;
        rightPanel.add(deleteDebtField, c);
        c.gridx = 0;
    
        // Delete Debt button
        JButton deleteDebtButton = new JButton("Delete Debt");
        deleteDebtButton.addActionListener(e -> deleteDebt(deleteDebtField.getText()));
        c.gridy++;
        rightPanel.add(deleteDebtButton, c);
    
        return rightPanel;
    }
    
    private static void saveDebt(JTextField[] textFields, boolean isOneTime, String category) {
        try {
            double amount = Double.parseDouble(textFields[0].getText());
            int time = Integer.parseInt(textFields[1].getText());
            double interestRate = Double.parseDouble(textFields[2].getText());
            String description = textFields[3].getText();
    
            Debt debt = new Debt(amount, interestRate, isOneTime, time, DebtCategory.valueOf(category.toUpperCase()), description);
            assetManager.addDebt(debt);
            JOptionPane.showMessageDialog(null, "Debt saved successfully!");
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Error in input data: " + ex.getMessage());
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Failed to save debt data: " + ex.getMessage());
        }
    }
    
    private static void deleteDebt(String description) {
        try {
            if (assetManager.deleteDebt(description)) {
                JOptionPane.showMessageDialog(null, "Debt deleted successfully!");
            } else {
                JOptionPane.showMessageDialog(null, "Debt not found: " + description);
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error deleting debt: " + ex.getMessage());
        }
    }

    
    
}
